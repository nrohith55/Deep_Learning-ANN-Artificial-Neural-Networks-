# -*- coding: utf-8 -*-
"""ANN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lVmER1PFU2uz9epve5upSsmJt6ERkZaH
"""

#Artificial Neural network : Churn Modelling

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df=pd.read_csv("/content/drive/My Drive/Deep learning/Churn_Modelling.csv")

df.head()

df.isnull().sum()

df.columns

df.tail()

df.shape

df_new=pd.get_dummies(df,columns={'Geography','Gender'},drop_first=True)

df_new.head()

df_new=df_new.drop(['RowNumber','CustomerId','Surname'],axis=1)

df_new.head()

data=df_new.iloc[:,[8,0,1,2,3,4,5,6,7,9,10,11]]

data.head()

X=data.iloc[:,1:12]

X.head()

y=data.iloc[:,0]

y.head()

from sklearn.model_selection import  train_test_split

from sklearn.preprocessing import scale

x=scale(X)

X_train,X_test,y_train,y_test=train_test_split(x,y,test_size=0.3)

X_train.shape

X_test.shape

y_train.shape

y_test.shape

############Now lets make ANNN###################

import keras#Keras is an open-source neural-network library written in Python. It is capable of running on top of TensorFlow, Microsoft Cognitive Toolkit, R, Theano, or PlaidML.[2][3][4] Designed to enable fast experimentation with deep neural networks

from keras.models import Sequential#The sequential API allows you to create models layer-by-layer for most problems

from keras.layers import Dense #The name suggests that layers are fully connected (dense) by the neurons in a network layer. Each neuron in a layer receives an input from all the neurons present in the previous layerâ€”thus, they're densely connected.

from keras.layers import LeakyReLU,PReLU,ELU#Importing activation functions

from keras.layers import Dropout#Dropout is a technique where randomly selected neurons are ignored during training

#Initializing the ANN
classifier=Sequential()

#Adding the input layer and the first hidden layer
classifier.add(Dense(output_dim=6,activation='relu',init='he_uniform',input_dim=11))

#Adding the second hidden layer
classifier.add(Dense(output_dim=6,activation='relu',init='he_uniform'))

classifier.add(Dense(output_dim=1,activation='sigmoid',init='glorot_uniform'))#Adding the output layer

#Compiling the ANN
classifier.compile(optimizer='Adamax',loss='binary_crossentropy',metrics=['accuracy'])

#Fitting the ANN to the training data
model_history=classifier.fit(X_train,y_train,batch_size=10,epochs=100)

print(model_history.history.keys())

#Making the predictions and Evaluating the models
y_pred=classifier.predict(X_test)
y_pred=(y_pred>0.5)

from sklearn.metrics import confusion_matrix,accuracy_score

print(confusion_matrix(y_test,y_pred))

print(accuracy_score(y_test,y_pred))

